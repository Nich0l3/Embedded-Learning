/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
	// peripheral registers
	uint32_t volatile * const pGPIOBModeReg = (uint32_t*)(0x40020400 + 0x00);
	uint32_t volatile * const pGPIOAModeReg = (uint32_t*)(0x40020000 + 0x00);

	uint32_t volatile * const pGPIOBInputReg = (uint32_t*)(0x40020400  + 0x10);
	uint32_t volatile * const pGPIOAOutputReg = (uint32_t*)(0x40020000 + 0x14);

	uint32_t volatile * const pGPIOBPUPDReg = (uint32_t*)(0x40020400 + 0x0C);

	uint32_t volatile * const pClockCtrlReg = (uint32_t*)(0x40023800 + 0x30);

	// clock enable for GPIOA and GPIOB
	*pClockCtrlReg |= (3 << 0);

	// set OUTPUT Pins PA3, PA2, PA10 and PA8
	uint32_t AoutputMask = 0;
	AoutputMask |= (1 << 6);
	AoutputMask |= (1 << 4);
	AoutputMask |= (1 << 20);
	AoutputMask |= (1 << 16);

	uint32_t AclearMask = 0;
	AclearMask |= (3 << 6);
	AclearMask |= (3 << 4);
	AclearMask |= (3 << 20);
	AclearMask |= (3 << 16)

	*pGPIOAModeReg &= AclearMask;
	*pGPIOAModeReg |= AoutputMask;

	// set INPUT pins PB3, PB5, PB4 and PB10
	uint32_t BclearMask = 0;
	BclearMask |= (3 << 6);
	BclearMask |= (3 << 10);
	BclearMask |= (3 << 8);
	BclearMask |= (3 << 20);

	*pGPIOBModeReg &= BclearMask;

	// Pull Up Pull Down Register
	// PUll up at Port B pins (input/columns pins)

	uint32_t BpullupMask = 0;
	BpullupMask |= (1 << 6);
	BpullupMask |= (1 << 10);
	BpullupMask |= (1 << 8);
	BpullupMask |= (1 << 20);

	*pGPIOBPUPDReg &= BclearMask;
	*pGPIOBPUPDReg |= BpullupMask;

	// Initialization

	//  PA3 PA2 PA10 PA8
	uint32_t AsetMask = 0;
	AoutputMask |= (1 << 3);
	AoutputMask |= (1 << 2);
	AoutputMask |= (1 << 10);
	AoutputMask |= (1 << 8);


	while(1){
		// HIGH on all output pins
		*pGPIOAOutputReg |= AsetMask;
		// LOW R1 (PA3)
		*pGPIOAOutputReg &= ~(1 << 3);

		// check for input PIN PB3
		if ( ~(*pGPIOBInputReg | (1 << 3)) ){
			printf("1");
		// check for input PIN PB5
		}else if ( ~(*pGPIOBInputReg | (1 << 5)) ){
			printf("2");
		// check for input PIN PB4
		}else if ( ~(*pGPIOBInputReg | (1 << 4)) ){
			printf("3");
		// check for input PIN PB10
		}else if ( ~(*pGPIOBInputReg | (1 << 10)) ){
			printf("A");
		}



		// HIGH on all output pins
		*pGPIOAOutputReg |= AsetMask;
		// LOW R2 (PA2)
		*pGPIOAOutputReg &= ~(1 << 2);

		// check for input PIN PB3
		if ( ~(*pGPIOBInputReg | (1 << 3)) ){
			printf("4");
		// check for input PIN PB5
		}else if ( ~(*pGPIOBInputReg | (1 << 5)) ){
			printf("5");
		// check for input PIN PB4
		}else if ( ~(*pGPIOBInputReg | (1 << 4)) ){
			printf("6");
		// check for input PIN PB10
		}else if ( ~(*pGPIOBInputReg | (1 << 10)) ){
			printf("B");
		}



		// HIGH on all output pins
		*pGPIOAOutputReg |= AsetMask;
		// LOW R3 (PA10)
		*pGPIOAOutputReg &= ~(1 << 10);

		// check for input PIN PB3
		if ( ~(*pGPIOBInputReg | (1 << 3)) ){
			printf("7");
		// check for input PIN PB5
		}else if ( ~(*pGPIOBInputReg | (1 << 5)) ){
			printf("8");
		// check for input PIN PB4
		}else if ( ~(*pGPIOBInputReg | (1 << 4)) ){
			printf("9");
		// check for input PIN PB10
		}else if ( ~(*pGPIOBInputReg | (1 << 10)) ){
			printf("C");
		}


		// HIGH on all output pins
		*pGPIOAOutputReg |= AsetMask;
		// LOW R4 (PA8)
		*pGPIOAOutputReg &= ~(1 << 8);

		// check for input PIN C1 (PB3)
		if ( ~(*pGPIOBInputReg | (1 << 3)) ){
			printf("*");
		// check for input PIN C2 (PB5)
		}else if ( ~(*pGPIOBInputReg | (1 << 5)) ){
			printf("0");
		// check for input PIN C3 (PB4)
		}else if ( ~(*pGPIOBInputReg | (1 << 4)) ){
			printf("#");
		// check for input PIN C4 (PB10)
		}else if ( ~(*pGPIOBInputReg | (1 << 10)) ){
			printf("D");
		}








	}

}






