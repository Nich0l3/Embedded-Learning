
003pin_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000154  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002e8  080002f0  000012f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002e8  080002e8  000012f0  2**0
                  CONTENTS
  4 .ARM          00000000  080002e8  080002e8  000012f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002e8  080002f0  000012f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002e8  080002e8  000012e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002ec  080002ec  000012ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000012f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002f0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002f0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000164  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000c0  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00001548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002c  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f70  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000042b  00000000  00000000  0000252c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003c82  00000000  00000000  00002957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000065d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000050  00000000  00000000  0000661c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0000666c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080002d0 	.word	0x080002d0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080002d0 	.word	0x080002d0

080001d4 <main>:
	uint32_t volatile *const pPortAOutReg = (uint32_t*)0x40020014;
	uint32_t volatile const *const pPortAInReg = (uint32_t*) 0x40020010; // input register should be treated as read-only

	//  1. Enable the peripheral clock enable register for GPIOA (0th bit) peripheral in the RCC_AHB1ENR
	// PA0 and PA5 are in same port no extra clock enable register is required
	*pClkCtrlReg |= 1 << 0;
 80001d4:	4915      	ldr	r1, [pc, #84]	@ (800022c <main+0x58>)

	// 2. Configure the GPIO port mode register, after configuring clock enable register

	// a. Clear the MODER5 -> LED, to remove existing data
	*pPortAModeReg &= ~(3 << 10); // 3 - 0b11
 80001d6:	4a16      	ldr	r2, [pc, #88]	@ (8000230 <main+0x5c>)
	*pClkCtrlReg |= 1 << 0;
 80001d8:	f8d1 3830 	ldr.w	r3, [r1, #2096]	@ 0x830
 80001dc:	f043 0301 	orr.w	r3, r3, #1
 80001e0:	f8c1 3830 	str.w	r3, [r1, #2096]	@ 0x830
	*pPortAModeReg &= ~(3 << 10); // 3 - 0b11
 80001e4:	6813      	ldr	r3, [r2, #0]
 80001e6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80001ea:	6013      	str	r3, [r2, #0]
	// clear MODER0 -> INPUT
	*pPortAModeReg &= ~(3 << 0);
 80001ec:	6813      	ldr	r3, [r2, #0]
 80001ee:	f023 0303 	bic.w	r3, r3, #3
 80001f2:	6013      	str	r3, [r2, #0]
		10: Alternate function mode
		11: Analog mode
	 */

	// b. 	set the MODER5 in output (here PA5)- 1 0
	*pPortAModeReg |= (1 << 10);
 80001f4:	6813      	ldr	r3, [r2, #0]
 80001f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001fa:	6013      	str	r3, [r2, #0]
	// 		set MODER0 in input () here PA0
	*pPortAModeReg &= ~(3 << 0); // NOT REQUIRED THO :)
 80001fc:	6813      	ldr	r3, [r2, #0]
 80001fe:	f023 0303 	bic.w	r3, r3, #3
{
 8000202:	b082      	sub	sp, #8
	*pPortAModeReg &= ~(3 << 0); // NOT REQUIRED THO :)
 8000204:	6013      	str	r3, [r2, #0]

	// 3. Set 5th bit of the output data register to make I/O pin-5 as HIGH

	while(1){
		// Read pin status of pin PA0 (GPIO INPUT DATA REGISTER)
		uint8_t volatile pinStatus = (uint8_t)(*pPortAInReg & 0x1); // masking for 0th bit to get data from 32 bit data
 8000206:	6913      	ldr	r3, [r2, #16]
 8000208:	f003 0301 	and.w	r3, r3, #1
 800020c:	f88d 3007 	strb.w	r3, [sp, #7]

		if (pinStatus){
 8000210:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000214:	b123      	cbz	r3, 8000220 <main+0x4c>
			*pPortAOutReg |= (1 << 5); // set
 8000216:	6953      	ldr	r3, [r2, #20]
 8000218:	f043 0320 	orr.w	r3, r3, #32
 800021c:	6153      	str	r3, [r2, #20]
 800021e:	e7f2      	b.n	8000206 <main+0x32>
		}else{
			*pPortAOutReg &= ~(1 << 5); // reset
 8000220:	6953      	ldr	r3, [r2, #20]
 8000222:	f023 0320 	bic.w	r3, r3, #32
 8000226:	6153      	str	r3, [r2, #20]
 8000228:	e7ed      	b.n	8000206 <main+0x32>
 800022a:	bf00      	nop
 800022c:	40023000 	.word	0x40023000
 8000230:	40020000 	.word	0x40020000

08000234 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000234:	480d      	ldr	r0, [pc, #52]	@ (800026c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000236:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000238:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800023c:	480c      	ldr	r0, [pc, #48]	@ (8000270 <LoopForever+0x6>)
  ldr r1, =_edata
 800023e:	490d      	ldr	r1, [pc, #52]	@ (8000274 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000240:	4a0d      	ldr	r2, [pc, #52]	@ (8000278 <LoopForever+0xe>)
  movs r3, #0
 8000242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000244:	e002      	b.n	800024c <LoopCopyDataInit>

08000246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800024a:	3304      	adds	r3, #4

0800024c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800024c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800024e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000250:	d3f9      	bcc.n	8000246 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000252:	4a0a      	ldr	r2, [pc, #40]	@ (800027c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000254:	4c0a      	ldr	r4, [pc, #40]	@ (8000280 <LoopForever+0x16>)
  movs r3, #0
 8000256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000258:	e001      	b.n	800025e <LoopFillZerobss>

0800025a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800025a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800025c:	3204      	adds	r2, #4

0800025e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800025e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000260:	d3fb      	bcc.n	800025a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000262:	f000 f811 	bl	8000288 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000266:	f7ff ffb5 	bl	80001d4 <main>

0800026a <LoopForever>:

LoopForever:
  b LoopForever
 800026a:	e7fe      	b.n	800026a <LoopForever>
  ldr   r0, =_estack
 800026c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000274:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000278:	080002f0 	.word	0x080002f0
  ldr r2, =_sbss
 800027c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000280:	2000001c 	.word	0x2000001c

08000284 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000284:	e7fe      	b.n	8000284 <ADC_IRQHandler>
	...

08000288 <__libc_init_array>:
 8000288:	b570      	push	{r4, r5, r6, lr}
 800028a:	4d0d      	ldr	r5, [pc, #52]	@ (80002c0 <__libc_init_array+0x38>)
 800028c:	4c0d      	ldr	r4, [pc, #52]	@ (80002c4 <__libc_init_array+0x3c>)
 800028e:	1b64      	subs	r4, r4, r5
 8000290:	10a4      	asrs	r4, r4, #2
 8000292:	2600      	movs	r6, #0
 8000294:	42a6      	cmp	r6, r4
 8000296:	d109      	bne.n	80002ac <__libc_init_array+0x24>
 8000298:	4d0b      	ldr	r5, [pc, #44]	@ (80002c8 <__libc_init_array+0x40>)
 800029a:	4c0c      	ldr	r4, [pc, #48]	@ (80002cc <__libc_init_array+0x44>)
 800029c:	f000 f818 	bl	80002d0 <_init>
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	10a4      	asrs	r4, r4, #2
 80002a4:	2600      	movs	r6, #0
 80002a6:	42a6      	cmp	r6, r4
 80002a8:	d105      	bne.n	80002b6 <__libc_init_array+0x2e>
 80002aa:	bd70      	pop	{r4, r5, r6, pc}
 80002ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80002b0:	4798      	blx	r3
 80002b2:	3601      	adds	r6, #1
 80002b4:	e7ee      	b.n	8000294 <__libc_init_array+0xc>
 80002b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ba:	4798      	blx	r3
 80002bc:	3601      	adds	r6, #1
 80002be:	e7f2      	b.n	80002a6 <__libc_init_array+0x1e>
 80002c0:	080002e8 	.word	0x080002e8
 80002c4:	080002e8 	.word	0x080002e8
 80002c8:	080002e8 	.word	0x080002e8
 80002cc:	080002ec 	.word	0x080002ec

080002d0 <_init>:
 80002d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d2:	bf00      	nop
 80002d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002d6:	bc08      	pop	{r3}
 80002d8:	469e      	mov	lr, r3
 80002da:	4770      	bx	lr

080002dc <_fini>:
 80002dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002de:	bf00      	nop
 80002e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e2:	bc08      	pop	{r3}
 80002e4:	469e      	mov	lr, r3
 80002e6:	4770      	bx	lr
