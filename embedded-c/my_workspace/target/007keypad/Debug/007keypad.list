
007keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e48  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000fdc  08000fdc  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000fdc  08000fdc  0000205c  2**0
                  CONTENTS
  4 .ARM          00000000  08000fdc  08000fdc  0000205c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fdc  08000fdc  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fdc  08000fdc  00001fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000fe0  08000fe0  00001fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08000fe4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001040  0000205c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001040  000021c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009c5  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000312  00000000  00000000  00002a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000118  00000000  00000000  00002d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000bf  00000000  00000000  00002e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002cd0  00000000  00000000  00002f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001334  00000000  00000000  00005c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009871  00000000  00000000  00006f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000107b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a04  00000000  00000000  000107f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  000111fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000005c 	.word	0x2000005c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000fc4 	.word	0x08000fc4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000060 	.word	0x20000060
 80001d0:	08000fc4 	.word	0x08000fc4

080001d4 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08c      	sub	sp, #48	@ 0x30
 80001d8:	af00      	add	r7, sp, #0
	// peripheral registers
	uint32_t volatile * const pGPIOBModeReg = (uint32_t*)(0x40020400 + 0x00);
 80001da:	4b92      	ldr	r3, [pc, #584]	@ (8000424 <main+0x250>)
 80001dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t volatile * const pGPIOAModeReg = (uint32_t*)(0x40020000 + 0x00);
 80001de:	4b92      	ldr	r3, [pc, #584]	@ (8000428 <main+0x254>)
 80001e0:	62bb      	str	r3, [r7, #40]	@ 0x28

	uint32_t volatile * const pGPIOBInputReg = (uint32_t*)(0x40020400  + 0x10);
 80001e2:	4b92      	ldr	r3, [pc, #584]	@ (800042c <main+0x258>)
 80001e4:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t volatile * const pGPIOAOutputReg = (uint32_t*)(0x40020000 + 0x14);
 80001e6:	4b92      	ldr	r3, [pc, #584]	@ (8000430 <main+0x25c>)
 80001e8:	623b      	str	r3, [r7, #32]

	uint32_t volatile * const pGPIOBPUPDReg = (uint32_t*)(0x40020400 + 0x0C);
 80001ea:	4b92      	ldr	r3, [pc, #584]	@ (8000434 <main+0x260>)
 80001ec:	61fb      	str	r3, [r7, #28]

	uint32_t volatile * const pClockCtrlReg = (uint32_t*)(0x40023800 + 0x30);
 80001ee:	4b92      	ldr	r3, [pc, #584]	@ (8000438 <main+0x264>)
 80001f0:	61bb      	str	r3, [r7, #24]

	// clock enable for GPIOA and GPIOB
	*pClockCtrlReg |= (3 << 0);
 80001f2:	69bb      	ldr	r3, [r7, #24]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f043 0203 	orr.w	r2, r3, #3
 80001fa:	69bb      	ldr	r3, [r7, #24]
 80001fc:	601a      	str	r2, [r3, #0]

	// set OUTPUT Pins PA3, PA2, PA10 and PA8
	uint32_t AoutputMask = 0;
 80001fe:	2300      	movs	r3, #0
 8000200:	617b      	str	r3, [r7, #20]
	AoutputMask |= (1 << 6);
 8000202:	697b      	ldr	r3, [r7, #20]
 8000204:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000208:	617b      	str	r3, [r7, #20]
	AoutputMask |= (1 << 4);
 800020a:	697b      	ldr	r3, [r7, #20]
 800020c:	f043 0310 	orr.w	r3, r3, #16
 8000210:	617b      	str	r3, [r7, #20]
	AoutputMask |= (1 << 20);
 8000212:	697b      	ldr	r3, [r7, #20]
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000218:	617b      	str	r3, [r7, #20]
	AoutputMask |= (1 << 16);
 800021a:	697b      	ldr	r3, [r7, #20]
 800021c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000220:	617b      	str	r3, [r7, #20]

	uint32_t AclearMask = 0;
 8000222:	2300      	movs	r3, #0
 8000224:	613b      	str	r3, [r7, #16]
	AclearMask |= (3 << 6);
 8000226:	693b      	ldr	r3, [r7, #16]
 8000228:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800022c:	613b      	str	r3, [r7, #16]
	AclearMask |= (3 << 4);
 800022e:	693b      	ldr	r3, [r7, #16]
 8000230:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000234:	613b      	str	r3, [r7, #16]
	AclearMask |= (3 << 20);
 8000236:	693b      	ldr	r3, [r7, #16]
 8000238:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800023c:	613b      	str	r3, [r7, #16]
	AclearMask |= (3 << 16);
 800023e:	693b      	ldr	r3, [r7, #16]
 8000240:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8000244:	613b      	str	r3, [r7, #16]

	*pGPIOAModeReg &= AclearMask;
 8000246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	693b      	ldr	r3, [r7, #16]
 800024c:	401a      	ands	r2, r3
 800024e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000250:	601a      	str	r2, [r3, #0]
	*pGPIOAModeReg |= AoutputMask;
 8000252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	697b      	ldr	r3, [r7, #20]
 8000258:	431a      	orrs	r2, r3
 800025a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800025c:	601a      	str	r2, [r3, #0]

	// set INPUT pins PB3, PB5, PB4 and PB10
	uint32_t BclearMask = 0;
 800025e:	2300      	movs	r3, #0
 8000260:	60fb      	str	r3, [r7, #12]
	BclearMask |= (3 << 6);
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000268:	60fb      	str	r3, [r7, #12]
	BclearMask |= (3 << 10);
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000270:	60fb      	str	r3, [r7, #12]
	BclearMask |= (3 << 8);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000278:	60fb      	str	r3, [r7, #12]
	BclearMask |= (3 << 20);
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8000280:	60fb      	str	r3, [r7, #12]

	*pGPIOBModeReg &= BclearMask;
 8000282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	401a      	ands	r2, r3
 800028a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800028c:	601a      	str	r2, [r3, #0]

	// Pull Up Pull Down Register
	// PUll up at Port B pins (input/columns pins)

	uint32_t BpullupMask = 0;
 800028e:	2300      	movs	r3, #0
 8000290:	60bb      	str	r3, [r7, #8]
	BpullupMask |= (1 << 6);
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000298:	60bb      	str	r3, [r7, #8]
	BpullupMask |= (1 << 10);
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002a0:	60bb      	str	r3, [r7, #8]
	BpullupMask |= (1 << 8);
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002a8:	60bb      	str	r3, [r7, #8]
	BpullupMask |= (1 << 20);
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	60bb      	str	r3, [r7, #8]

	*pGPIOBPUPDReg &= BclearMask;
 80002b2:	69fb      	ldr	r3, [r7, #28]
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	401a      	ands	r2, r3
 80002ba:	69fb      	ldr	r3, [r7, #28]
 80002bc:	601a      	str	r2, [r3, #0]
	*pGPIOBPUPDReg |= BpullupMask;
 80002be:	69fb      	ldr	r3, [r7, #28]
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	431a      	orrs	r2, r3
 80002c6:	69fb      	ldr	r3, [r7, #28]
 80002c8:	601a      	str	r2, [r3, #0]

	// Initialization

	//  PA3 PA2 PA10 PA8
	uint32_t AsetMask = 0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	607b      	str	r3, [r7, #4]
	AoutputMask |= (1 << 3);
 80002ce:	697b      	ldr	r3, [r7, #20]
 80002d0:	f043 0308 	orr.w	r3, r3, #8
 80002d4:	617b      	str	r3, [r7, #20]
	AoutputMask |= (1 << 2);
 80002d6:	697b      	ldr	r3, [r7, #20]
 80002d8:	f043 0304 	orr.w	r3, r3, #4
 80002dc:	617b      	str	r3, [r7, #20]
	AoutputMask |= (1 << 10);
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002e4:	617b      	str	r3, [r7, #20]
	AoutputMask |= (1 << 8);
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002ec:	617b      	str	r3, [r7, #20]


	while(1){
		// HIGH on all output pins
		*pGPIOAOutputReg |= AsetMask;
 80002ee:	6a3b      	ldr	r3, [r7, #32]
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	431a      	orrs	r2, r3
 80002f6:	6a3b      	ldr	r3, [r7, #32]
 80002f8:	601a      	str	r2, [r3, #0]
		// LOW R1 (PA3)
		*pGPIOAOutputReg &= ~(1 << 3);
 80002fa:	6a3b      	ldr	r3, [r7, #32]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f023 0208 	bic.w	r2, r3, #8
 8000302:	6a3b      	ldr	r3, [r7, #32]
 8000304:	601a      	str	r2, [r3, #0]

		// check for input PIN C1 (PB3)
		if ( ~(*pGPIOBInputReg | (1 << 3)) ){
 8000306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f043 0308 	orr.w	r3, r3, #8
 800030e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000312:	d003      	beq.n	800031c <main+0x148>
			printf("1");
 8000314:	2031      	movs	r0, #49	@ 0x31
 8000316:	f000 fa8d 	bl	8000834 <putchar>
 800031a:	e01f      	b.n	800035c <main+0x188>
			// check for input PIN C2 (PB5)
		}else if ( ~(*pGPIOBInputReg | (1 << 5)) ){
 800031c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	f043 0320 	orr.w	r3, r3, #32
 8000324:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000328:	d003      	beq.n	8000332 <main+0x15e>
			printf("2");
 800032a:	2032      	movs	r0, #50	@ 0x32
 800032c:	f000 fa82 	bl	8000834 <putchar>
 8000330:	e014      	b.n	800035c <main+0x188>
			// check for input PIN C3 (PB4)
		}else if ( ~(*pGPIOBInputReg | (1 << 4)) ){
 8000332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f043 0310 	orr.w	r3, r3, #16
 800033a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800033e:	d003      	beq.n	8000348 <main+0x174>
			printf("3");
 8000340:	2033      	movs	r0, #51	@ 0x33
 8000342:	f000 fa77 	bl	8000834 <putchar>
 8000346:	e009      	b.n	800035c <main+0x188>
			// check for input PIN C4 (PB10)
		}else if ( ~(*pGPIOBInputReg | (1 << 10)) ){
 8000348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000350:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000354:	d002      	beq.n	800035c <main+0x188>
			printf("A");
 8000356:	2041      	movs	r0, #65	@ 0x41
 8000358:	f000 fa6c 	bl	8000834 <putchar>
		}



		// HIGH on all output pins
		*pGPIOAOutputReg |= AsetMask;
 800035c:	6a3b      	ldr	r3, [r7, #32]
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	431a      	orrs	r2, r3
 8000364:	6a3b      	ldr	r3, [r7, #32]
 8000366:	601a      	str	r2, [r3, #0]
		// LOW R2 (PA2)
		*pGPIOAOutputReg &= ~(1 << 2);
 8000368:	6a3b      	ldr	r3, [r7, #32]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f023 0204 	bic.w	r2, r3, #4
 8000370:	6a3b      	ldr	r3, [r7, #32]
 8000372:	601a      	str	r2, [r3, #0]

		// check for input PIN C1 (PB3)
		if ( ~(*pGPIOBInputReg | (1 << 3)) ){
 8000374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f043 0308 	orr.w	r3, r3, #8
 800037c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000380:	d003      	beq.n	800038a <main+0x1b6>
			printf("4");
 8000382:	2034      	movs	r0, #52	@ 0x34
 8000384:	f000 fa56 	bl	8000834 <putchar>
 8000388:	e01f      	b.n	80003ca <main+0x1f6>
			// check for input PIN C2 (PB5)
		}else if ( ~(*pGPIOBInputReg | (1 << 5)) ){
 800038a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f043 0320 	orr.w	r3, r3, #32
 8000392:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000396:	d003      	beq.n	80003a0 <main+0x1cc>
			printf("5");
 8000398:	2035      	movs	r0, #53	@ 0x35
 800039a:	f000 fa4b 	bl	8000834 <putchar>
 800039e:	e014      	b.n	80003ca <main+0x1f6>
			// check for input PIN C3 (PB4)
		}else if ( ~(*pGPIOBInputReg | (1 << 4)) ){
 80003a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f043 0310 	orr.w	r3, r3, #16
 80003a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80003ac:	d003      	beq.n	80003b6 <main+0x1e2>
			printf("6");
 80003ae:	2036      	movs	r0, #54	@ 0x36
 80003b0:	f000 fa40 	bl	8000834 <putchar>
 80003b4:	e009      	b.n	80003ca <main+0x1f6>
			// check for input PIN C4 (PB10)
		}else if ( ~(*pGPIOBInputReg | (1 << 10)) ){
 80003b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80003c2:	d002      	beq.n	80003ca <main+0x1f6>
			printf("B");
 80003c4:	2042      	movs	r0, #66	@ 0x42
 80003c6:	f000 fa35 	bl	8000834 <putchar>
		}



		// HIGH on all output pins
		*pGPIOAOutputReg |= AsetMask;
 80003ca:	6a3b      	ldr	r3, [r7, #32]
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	431a      	orrs	r2, r3
 80003d2:	6a3b      	ldr	r3, [r7, #32]
 80003d4:	601a      	str	r2, [r3, #0]
		// LOW R3 (PA10)
		*pGPIOAOutputReg &= ~(1 << 10);
 80003d6:	6a3b      	ldr	r3, [r7, #32]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80003de:	6a3b      	ldr	r3, [r7, #32]
 80003e0:	601a      	str	r2, [r3, #0]

		// check for input PIN C1 (PB3)
		if ( ~(*pGPIOBInputReg | (1 << 3)) ){
 80003e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f043 0308 	orr.w	r3, r3, #8
 80003ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80003ee:	d003      	beq.n	80003f8 <main+0x224>
			printf("7");
 80003f0:	2037      	movs	r0, #55	@ 0x37
 80003f2:	f000 fa1f 	bl	8000834 <putchar>
 80003f6:	e02b      	b.n	8000450 <main+0x27c>
			// check for input PIN C2 (PB5)
		}else if ( ~(*pGPIOBInputReg | (1 << 5)) ){
 80003f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	f043 0320 	orr.w	r3, r3, #32
 8000400:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000404:	d003      	beq.n	800040e <main+0x23a>
			printf("8");
 8000406:	2038      	movs	r0, #56	@ 0x38
 8000408:	f000 fa14 	bl	8000834 <putchar>
 800040c:	e020      	b.n	8000450 <main+0x27c>
			// check for input PIN C3 (PB4)
		}else if ( ~(*pGPIOBInputReg | (1 << 4)) ){
 800040e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f043 0310 	orr.w	r3, r3, #16
 8000416:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800041a:	d00f      	beq.n	800043c <main+0x268>
			printf("9");
 800041c:	2039      	movs	r0, #57	@ 0x39
 800041e:	f000 fa09 	bl	8000834 <putchar>
 8000422:	e015      	b.n	8000450 <main+0x27c>
 8000424:	40020400 	.word	0x40020400
 8000428:	40020000 	.word	0x40020000
 800042c:	40020410 	.word	0x40020410
 8000430:	40020014 	.word	0x40020014
 8000434:	4002040c 	.word	0x4002040c
 8000438:	40023830 	.word	0x40023830
			// check for input PIN C4 (PB10)
		}else if ( ~(*pGPIOBInputReg | (1 << 10)) ){
 800043c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000444:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000448:	d002      	beq.n	8000450 <main+0x27c>
			printf("C");
 800044a:	2043      	movs	r0, #67	@ 0x43
 800044c:	f000 f9f2 	bl	8000834 <putchar>
		}


		// HIGH on all output pins
		*pGPIOAOutputReg |= AsetMask;
 8000450:	6a3b      	ldr	r3, [r7, #32]
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	431a      	orrs	r2, r3
 8000458:	6a3b      	ldr	r3, [r7, #32]
 800045a:	601a      	str	r2, [r3, #0]
		// LOW R4 (PA8)
		*pGPIOAOutputReg &= ~(1 << 8);
 800045c:	6a3b      	ldr	r3, [r7, #32]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000464:	6a3b      	ldr	r3, [r7, #32]
 8000466:	601a      	str	r2, [r3, #0]

		// check for input PIN C1 (PB3)
		if ( ~(*pGPIOBInputReg | (1 << 3)) ){
 8000468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f043 0308 	orr.w	r3, r3, #8
 8000470:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000474:	d003      	beq.n	800047e <main+0x2aa>
			printf("*");
 8000476:	202a      	movs	r0, #42	@ 0x2a
 8000478:	f000 f9dc 	bl	8000834 <putchar>
 800047c:	e737      	b.n	80002ee <main+0x11a>
		// check for input PIN C2 (PB5)
		}else if ( ~(*pGPIOBInputReg | (1 << 5)) ){
 800047e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f043 0320 	orr.w	r3, r3, #32
 8000486:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800048a:	d003      	beq.n	8000494 <main+0x2c0>
			printf("0");
 800048c:	2030      	movs	r0, #48	@ 0x30
 800048e:	f000 f9d1 	bl	8000834 <putchar>
 8000492:	e72c      	b.n	80002ee <main+0x11a>
		// check for input PIN C3 (PB4)
		}else if ( ~(*pGPIOBInputReg | (1 << 4)) ){
 8000494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f043 0310 	orr.w	r3, r3, #16
 800049c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80004a0:	d003      	beq.n	80004aa <main+0x2d6>
			printf("#");
 80004a2:	2023      	movs	r0, #35	@ 0x23
 80004a4:	f000 f9c6 	bl	8000834 <putchar>
 80004a8:	e721      	b.n	80002ee <main+0x11a>
		// check for input PIN C4 (PB10)
		}else if ( ~(*pGPIOBInputReg | (1 << 10)) ){
 80004aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80004b6:	f43f af1a 	beq.w	80002ee <main+0x11a>
			printf("D");
 80004ba:	2044      	movs	r0, #68	@ 0x44
 80004bc:	f000 f9ba 	bl	8000834 <putchar>
		*pGPIOAOutputReg |= AsetMask;
 80004c0:	e715      	b.n	80002ee <main+0x11a>
 80004c2:	bf00      	nop

080004c4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004ce:	4b0f      	ldr	r3, [pc, #60]	@ (800050c <ITM_SendChar+0x48>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a0e      	ldr	r2, [pc, #56]	@ (800050c <ITM_SendChar+0x48>)
 80004d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004d8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004da:	4b0d      	ldr	r3, [pc, #52]	@ (8000510 <ITM_SendChar+0x4c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a0c      	ldr	r2, [pc, #48]	@ (8000510 <ITM_SendChar+0x4c>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004e6:	bf00      	nop
 80004e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d0f8      	beq.n	80004e8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004f6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	6013      	str	r3, [r2, #0]
}
 80004fe:	bf00      	nop
 8000500:	370c      	adds	r7, #12
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	e000edfc 	.word	0xe000edfc
 8000510:	e0000e00 	.word	0xe0000e00

08000514 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	e00a      	b.n	800053c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000526:	f3af 8000 	nop.w
 800052a:	4601      	mov	r1, r0
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	1c5a      	adds	r2, r3, #1
 8000530:	60ba      	str	r2, [r7, #8]
 8000532:	b2ca      	uxtb	r2, r1
 8000534:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	3301      	adds	r3, #1
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	429a      	cmp	r2, r3
 8000542:	dbf0      	blt.n	8000526 <_read+0x12>
  }

  return len;
 8000544:	687b      	ldr	r3, [r7, #4]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3718      	adds	r7, #24
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b086      	sub	sp, #24
 8000552:	af00      	add	r7, sp, #0
 8000554:	60f8      	str	r0, [r7, #12]
 8000556:	60b9      	str	r1, [r7, #8]
 8000558:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]
 800055e:	e009      	b.n	8000574 <_write+0x26>
  {
   // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	60ba      	str	r2, [r7, #8]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff ffab 	bl	80004c4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	3301      	adds	r3, #1
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	697a      	ldr	r2, [r7, #20]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	429a      	cmp	r2, r3
 800057a:	dbf1      	blt.n	8000560 <_write+0x12>
  }
  return len;
 800057c:	687b      	ldr	r3, [r7, #4]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3718      	adds	r7, #24
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <_close>:

int _close(int file)
{
 8000586:	b480      	push	{r7}
 8000588:	b083      	sub	sp, #12
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800058e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000592:	4618      	mov	r0, r3
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
 80005a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005ae:	605a      	str	r2, [r3, #4]
  return 0;
 80005b0:	2300      	movs	r3, #0
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <_isatty>:

int _isatty(int file)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005c6:	2301      	movs	r3, #1
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005e0:	2300      	movs	r3, #0
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005f8:	4a14      	ldr	r2, [pc, #80]	@ (800064c <_sbrk+0x5c>)
 80005fa:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <_sbrk+0x60>)
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000604:	4b13      	ldr	r3, [pc, #76]	@ (8000654 <_sbrk+0x64>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d102      	bne.n	8000612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800060c:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <_sbrk+0x64>)
 800060e:	4a12      	ldr	r2, [pc, #72]	@ (8000658 <_sbrk+0x68>)
 8000610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000612:	4b10      	ldr	r3, [pc, #64]	@ (8000654 <_sbrk+0x64>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	693a      	ldr	r2, [r7, #16]
 800061c:	429a      	cmp	r2, r3
 800061e:	d207      	bcs.n	8000630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000620:	f000 f9a2 	bl	8000968 <__errno>
 8000624:	4603      	mov	r3, r0
 8000626:	220c      	movs	r2, #12
 8000628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800062a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800062e:	e009      	b.n	8000644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000630:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <_sbrk+0x64>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000636:	4b07      	ldr	r3, [pc, #28]	@ (8000654 <_sbrk+0x64>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4413      	add	r3, r2
 800063e:	4a05      	ldr	r2, [pc, #20]	@ (8000654 <_sbrk+0x64>)
 8000640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000642:	68fb      	ldr	r3, [r7, #12]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20018000 	.word	0x20018000
 8000650:	00000400 	.word	0x00000400
 8000654:	20000078 	.word	0x20000078
 8000658:	200001c8 	.word	0x200001c8

0800065c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800065c:	480d      	ldr	r0, [pc, #52]	@ (8000694 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800065e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000660:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000664:	480c      	ldr	r0, [pc, #48]	@ (8000698 <LoopForever+0x6>)
  ldr r1, =_edata
 8000666:	490d      	ldr	r1, [pc, #52]	@ (800069c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000668:	4a0d      	ldr	r2, [pc, #52]	@ (80006a0 <LoopForever+0xe>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800066c:	e002      	b.n	8000674 <LoopCopyDataInit>

0800066e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000672:	3304      	adds	r3, #4

08000674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000678:	d3f9      	bcc.n	800066e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800067a:	4a0a      	ldr	r2, [pc, #40]	@ (80006a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800067c:	4c0a      	ldr	r4, [pc, #40]	@ (80006a8 <LoopForever+0x16>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000680:	e001      	b.n	8000686 <LoopFillZerobss>

08000682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000684:	3204      	adds	r2, #4

08000686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000688:	d3fb      	bcc.n	8000682 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800068a:	f000 f973 	bl	8000974 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800068e:	f7ff fda1 	bl	80001d4 <main>

08000692 <LoopForever>:

LoopForever:
  b LoopForever
 8000692:	e7fe      	b.n	8000692 <LoopForever>
  ldr   r0, =_estack
 8000694:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800069c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006a0:	08000fe4 	.word	0x08000fe4
  ldr r2, =_sbss
 80006a4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006a8:	200001c8 	.word	0x200001c8

080006ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ac:	e7fe      	b.n	80006ac <ADC_IRQHandler>
	...

080006b0 <std>:
 80006b0:	2300      	movs	r3, #0
 80006b2:	b510      	push	{r4, lr}
 80006b4:	4604      	mov	r4, r0
 80006b6:	e9c0 3300 	strd	r3, r3, [r0]
 80006ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006be:	6083      	str	r3, [r0, #8]
 80006c0:	8181      	strh	r1, [r0, #12]
 80006c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80006c4:	81c2      	strh	r2, [r0, #14]
 80006c6:	6183      	str	r3, [r0, #24]
 80006c8:	4619      	mov	r1, r3
 80006ca:	2208      	movs	r2, #8
 80006cc:	305c      	adds	r0, #92	@ 0x5c
 80006ce:	f000 f8fc 	bl	80008ca <memset>
 80006d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000708 <std+0x58>)
 80006d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80006d6:	4b0d      	ldr	r3, [pc, #52]	@ (800070c <std+0x5c>)
 80006d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80006da:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <std+0x60>)
 80006dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80006de:	4b0d      	ldr	r3, [pc, #52]	@ (8000714 <std+0x64>)
 80006e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80006e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000718 <std+0x68>)
 80006e4:	6224      	str	r4, [r4, #32]
 80006e6:	429c      	cmp	r4, r3
 80006e8:	d006      	beq.n	80006f8 <std+0x48>
 80006ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80006ee:	4294      	cmp	r4, r2
 80006f0:	d002      	beq.n	80006f8 <std+0x48>
 80006f2:	33d0      	adds	r3, #208	@ 0xd0
 80006f4:	429c      	cmp	r4, r3
 80006f6:	d105      	bne.n	8000704 <std+0x54>
 80006f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80006fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000700:	f000 b95c 	b.w	80009bc <__retarget_lock_init_recursive>
 8000704:	bd10      	pop	{r4, pc}
 8000706:	bf00      	nop
 8000708:	08000845 	.word	0x08000845
 800070c:	08000867 	.word	0x08000867
 8000710:	0800089f 	.word	0x0800089f
 8000714:	080008c3 	.word	0x080008c3
 8000718:	2000007c 	.word	0x2000007c

0800071c <stdio_exit_handler>:
 800071c:	4a02      	ldr	r2, [pc, #8]	@ (8000728 <stdio_exit_handler+0xc>)
 800071e:	4903      	ldr	r1, [pc, #12]	@ (800072c <stdio_exit_handler+0x10>)
 8000720:	4803      	ldr	r0, [pc, #12]	@ (8000730 <stdio_exit_handler+0x14>)
 8000722:	f000 b869 	b.w	80007f8 <_fwalk_sglue>
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000
 800072c:	08000cbd 	.word	0x08000cbd
 8000730:	20000010 	.word	0x20000010

08000734 <cleanup_stdio>:
 8000734:	6841      	ldr	r1, [r0, #4]
 8000736:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <cleanup_stdio+0x34>)
 8000738:	4299      	cmp	r1, r3
 800073a:	b510      	push	{r4, lr}
 800073c:	4604      	mov	r4, r0
 800073e:	d001      	beq.n	8000744 <cleanup_stdio+0x10>
 8000740:	f000 fabc 	bl	8000cbc <_fflush_r>
 8000744:	68a1      	ldr	r1, [r4, #8]
 8000746:	4b09      	ldr	r3, [pc, #36]	@ (800076c <cleanup_stdio+0x38>)
 8000748:	4299      	cmp	r1, r3
 800074a:	d002      	beq.n	8000752 <cleanup_stdio+0x1e>
 800074c:	4620      	mov	r0, r4
 800074e:	f000 fab5 	bl	8000cbc <_fflush_r>
 8000752:	68e1      	ldr	r1, [r4, #12]
 8000754:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <cleanup_stdio+0x3c>)
 8000756:	4299      	cmp	r1, r3
 8000758:	d004      	beq.n	8000764 <cleanup_stdio+0x30>
 800075a:	4620      	mov	r0, r4
 800075c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000760:	f000 baac 	b.w	8000cbc <_fflush_r>
 8000764:	bd10      	pop	{r4, pc}
 8000766:	bf00      	nop
 8000768:	2000007c 	.word	0x2000007c
 800076c:	200000e4 	.word	0x200000e4
 8000770:	2000014c 	.word	0x2000014c

08000774 <global_stdio_init.part.0>:
 8000774:	b510      	push	{r4, lr}
 8000776:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <global_stdio_init.part.0+0x30>)
 8000778:	4c0b      	ldr	r4, [pc, #44]	@ (80007a8 <global_stdio_init.part.0+0x34>)
 800077a:	4a0c      	ldr	r2, [pc, #48]	@ (80007ac <global_stdio_init.part.0+0x38>)
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	4620      	mov	r0, r4
 8000780:	2200      	movs	r2, #0
 8000782:	2104      	movs	r1, #4
 8000784:	f7ff ff94 	bl	80006b0 <std>
 8000788:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800078c:	2201      	movs	r2, #1
 800078e:	2109      	movs	r1, #9
 8000790:	f7ff ff8e 	bl	80006b0 <std>
 8000794:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000798:	2202      	movs	r2, #2
 800079a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800079e:	2112      	movs	r1, #18
 80007a0:	f7ff bf86 	b.w	80006b0 <std>
 80007a4:	200001b4 	.word	0x200001b4
 80007a8:	2000007c 	.word	0x2000007c
 80007ac:	0800071d 	.word	0x0800071d

080007b0 <__sfp_lock_acquire>:
 80007b0:	4801      	ldr	r0, [pc, #4]	@ (80007b8 <__sfp_lock_acquire+0x8>)
 80007b2:	f000 b904 	b.w	80009be <__retarget_lock_acquire_recursive>
 80007b6:	bf00      	nop
 80007b8:	200001bd 	.word	0x200001bd

080007bc <__sfp_lock_release>:
 80007bc:	4801      	ldr	r0, [pc, #4]	@ (80007c4 <__sfp_lock_release+0x8>)
 80007be:	f000 b8ff 	b.w	80009c0 <__retarget_lock_release_recursive>
 80007c2:	bf00      	nop
 80007c4:	200001bd 	.word	0x200001bd

080007c8 <__sinit>:
 80007c8:	b510      	push	{r4, lr}
 80007ca:	4604      	mov	r4, r0
 80007cc:	f7ff fff0 	bl	80007b0 <__sfp_lock_acquire>
 80007d0:	6a23      	ldr	r3, [r4, #32]
 80007d2:	b11b      	cbz	r3, 80007dc <__sinit+0x14>
 80007d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007d8:	f7ff bff0 	b.w	80007bc <__sfp_lock_release>
 80007dc:	4b04      	ldr	r3, [pc, #16]	@ (80007f0 <__sinit+0x28>)
 80007de:	6223      	str	r3, [r4, #32]
 80007e0:	4b04      	ldr	r3, [pc, #16]	@ (80007f4 <__sinit+0x2c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d1f5      	bne.n	80007d4 <__sinit+0xc>
 80007e8:	f7ff ffc4 	bl	8000774 <global_stdio_init.part.0>
 80007ec:	e7f2      	b.n	80007d4 <__sinit+0xc>
 80007ee:	bf00      	nop
 80007f0:	08000735 	.word	0x08000735
 80007f4:	200001b4 	.word	0x200001b4

080007f8 <_fwalk_sglue>:
 80007f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007fc:	4607      	mov	r7, r0
 80007fe:	4688      	mov	r8, r1
 8000800:	4614      	mov	r4, r2
 8000802:	2600      	movs	r6, #0
 8000804:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000808:	f1b9 0901 	subs.w	r9, r9, #1
 800080c:	d505      	bpl.n	800081a <_fwalk_sglue+0x22>
 800080e:	6824      	ldr	r4, [r4, #0]
 8000810:	2c00      	cmp	r4, #0
 8000812:	d1f7      	bne.n	8000804 <_fwalk_sglue+0xc>
 8000814:	4630      	mov	r0, r6
 8000816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800081a:	89ab      	ldrh	r3, [r5, #12]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d907      	bls.n	8000830 <_fwalk_sglue+0x38>
 8000820:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000824:	3301      	adds	r3, #1
 8000826:	d003      	beq.n	8000830 <_fwalk_sglue+0x38>
 8000828:	4629      	mov	r1, r5
 800082a:	4638      	mov	r0, r7
 800082c:	47c0      	blx	r8
 800082e:	4306      	orrs	r6, r0
 8000830:	3568      	adds	r5, #104	@ 0x68
 8000832:	e7e9      	b.n	8000808 <_fwalk_sglue+0x10>

08000834 <putchar>:
 8000834:	4b02      	ldr	r3, [pc, #8]	@ (8000840 <putchar+0xc>)
 8000836:	4601      	mov	r1, r0
 8000838:	6818      	ldr	r0, [r3, #0]
 800083a:	6882      	ldr	r2, [r0, #8]
 800083c:	f000 ba66 	b.w	8000d0c <_putc_r>
 8000840:	2000000c 	.word	0x2000000c

08000844 <__sread>:
 8000844:	b510      	push	{r4, lr}
 8000846:	460c      	mov	r4, r1
 8000848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800084c:	f000 f868 	bl	8000920 <_read_r>
 8000850:	2800      	cmp	r0, #0
 8000852:	bfab      	itete	ge
 8000854:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000856:	89a3      	ldrhlt	r3, [r4, #12]
 8000858:	181b      	addge	r3, r3, r0
 800085a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800085e:	bfac      	ite	ge
 8000860:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000862:	81a3      	strhlt	r3, [r4, #12]
 8000864:	bd10      	pop	{r4, pc}

08000866 <__swrite>:
 8000866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800086a:	461f      	mov	r7, r3
 800086c:	898b      	ldrh	r3, [r1, #12]
 800086e:	05db      	lsls	r3, r3, #23
 8000870:	4605      	mov	r5, r0
 8000872:	460c      	mov	r4, r1
 8000874:	4616      	mov	r6, r2
 8000876:	d505      	bpl.n	8000884 <__swrite+0x1e>
 8000878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800087c:	2302      	movs	r3, #2
 800087e:	2200      	movs	r2, #0
 8000880:	f000 f83c 	bl	80008fc <_lseek_r>
 8000884:	89a3      	ldrh	r3, [r4, #12]
 8000886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800088a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800088e:	81a3      	strh	r3, [r4, #12]
 8000890:	4632      	mov	r2, r6
 8000892:	463b      	mov	r3, r7
 8000894:	4628      	mov	r0, r5
 8000896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800089a:	f000 b853 	b.w	8000944 <_write_r>

0800089e <__sseek>:
 800089e:	b510      	push	{r4, lr}
 80008a0:	460c      	mov	r4, r1
 80008a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008a6:	f000 f829 	bl	80008fc <_lseek_r>
 80008aa:	1c43      	adds	r3, r0, #1
 80008ac:	89a3      	ldrh	r3, [r4, #12]
 80008ae:	bf15      	itete	ne
 80008b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80008b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80008b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80008ba:	81a3      	strheq	r3, [r4, #12]
 80008bc:	bf18      	it	ne
 80008be:	81a3      	strhne	r3, [r4, #12]
 80008c0:	bd10      	pop	{r4, pc}

080008c2 <__sclose>:
 80008c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008c6:	f000 b809 	b.w	80008dc <_close_r>

080008ca <memset>:
 80008ca:	4402      	add	r2, r0
 80008cc:	4603      	mov	r3, r0
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d100      	bne.n	80008d4 <memset+0xa>
 80008d2:	4770      	bx	lr
 80008d4:	f803 1b01 	strb.w	r1, [r3], #1
 80008d8:	e7f9      	b.n	80008ce <memset+0x4>
	...

080008dc <_close_r>:
 80008dc:	b538      	push	{r3, r4, r5, lr}
 80008de:	4d06      	ldr	r5, [pc, #24]	@ (80008f8 <_close_r+0x1c>)
 80008e0:	2300      	movs	r3, #0
 80008e2:	4604      	mov	r4, r0
 80008e4:	4608      	mov	r0, r1
 80008e6:	602b      	str	r3, [r5, #0]
 80008e8:	f7ff fe4d 	bl	8000586 <_close>
 80008ec:	1c43      	adds	r3, r0, #1
 80008ee:	d102      	bne.n	80008f6 <_close_r+0x1a>
 80008f0:	682b      	ldr	r3, [r5, #0]
 80008f2:	b103      	cbz	r3, 80008f6 <_close_r+0x1a>
 80008f4:	6023      	str	r3, [r4, #0]
 80008f6:	bd38      	pop	{r3, r4, r5, pc}
 80008f8:	200001b8 	.word	0x200001b8

080008fc <_lseek_r>:
 80008fc:	b538      	push	{r3, r4, r5, lr}
 80008fe:	4d07      	ldr	r5, [pc, #28]	@ (800091c <_lseek_r+0x20>)
 8000900:	4604      	mov	r4, r0
 8000902:	4608      	mov	r0, r1
 8000904:	4611      	mov	r1, r2
 8000906:	2200      	movs	r2, #0
 8000908:	602a      	str	r2, [r5, #0]
 800090a:	461a      	mov	r2, r3
 800090c:	f7ff fe62 	bl	80005d4 <_lseek>
 8000910:	1c43      	adds	r3, r0, #1
 8000912:	d102      	bne.n	800091a <_lseek_r+0x1e>
 8000914:	682b      	ldr	r3, [r5, #0]
 8000916:	b103      	cbz	r3, 800091a <_lseek_r+0x1e>
 8000918:	6023      	str	r3, [r4, #0]
 800091a:	bd38      	pop	{r3, r4, r5, pc}
 800091c:	200001b8 	.word	0x200001b8

08000920 <_read_r>:
 8000920:	b538      	push	{r3, r4, r5, lr}
 8000922:	4d07      	ldr	r5, [pc, #28]	@ (8000940 <_read_r+0x20>)
 8000924:	4604      	mov	r4, r0
 8000926:	4608      	mov	r0, r1
 8000928:	4611      	mov	r1, r2
 800092a:	2200      	movs	r2, #0
 800092c:	602a      	str	r2, [r5, #0]
 800092e:	461a      	mov	r2, r3
 8000930:	f7ff fdf0 	bl	8000514 <_read>
 8000934:	1c43      	adds	r3, r0, #1
 8000936:	d102      	bne.n	800093e <_read_r+0x1e>
 8000938:	682b      	ldr	r3, [r5, #0]
 800093a:	b103      	cbz	r3, 800093e <_read_r+0x1e>
 800093c:	6023      	str	r3, [r4, #0]
 800093e:	bd38      	pop	{r3, r4, r5, pc}
 8000940:	200001b8 	.word	0x200001b8

08000944 <_write_r>:
 8000944:	b538      	push	{r3, r4, r5, lr}
 8000946:	4d07      	ldr	r5, [pc, #28]	@ (8000964 <_write_r+0x20>)
 8000948:	4604      	mov	r4, r0
 800094a:	4608      	mov	r0, r1
 800094c:	4611      	mov	r1, r2
 800094e:	2200      	movs	r2, #0
 8000950:	602a      	str	r2, [r5, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	f7ff fdfb 	bl	800054e <_write>
 8000958:	1c43      	adds	r3, r0, #1
 800095a:	d102      	bne.n	8000962 <_write_r+0x1e>
 800095c:	682b      	ldr	r3, [r5, #0]
 800095e:	b103      	cbz	r3, 8000962 <_write_r+0x1e>
 8000960:	6023      	str	r3, [r4, #0]
 8000962:	bd38      	pop	{r3, r4, r5, pc}
 8000964:	200001b8 	.word	0x200001b8

08000968 <__errno>:
 8000968:	4b01      	ldr	r3, [pc, #4]	@ (8000970 <__errno+0x8>)
 800096a:	6818      	ldr	r0, [r3, #0]
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	2000000c 	.word	0x2000000c

08000974 <__libc_init_array>:
 8000974:	b570      	push	{r4, r5, r6, lr}
 8000976:	4d0d      	ldr	r5, [pc, #52]	@ (80009ac <__libc_init_array+0x38>)
 8000978:	4c0d      	ldr	r4, [pc, #52]	@ (80009b0 <__libc_init_array+0x3c>)
 800097a:	1b64      	subs	r4, r4, r5
 800097c:	10a4      	asrs	r4, r4, #2
 800097e:	2600      	movs	r6, #0
 8000980:	42a6      	cmp	r6, r4
 8000982:	d109      	bne.n	8000998 <__libc_init_array+0x24>
 8000984:	4d0b      	ldr	r5, [pc, #44]	@ (80009b4 <__libc_init_array+0x40>)
 8000986:	4c0c      	ldr	r4, [pc, #48]	@ (80009b8 <__libc_init_array+0x44>)
 8000988:	f000 fb1c 	bl	8000fc4 <_init>
 800098c:	1b64      	subs	r4, r4, r5
 800098e:	10a4      	asrs	r4, r4, #2
 8000990:	2600      	movs	r6, #0
 8000992:	42a6      	cmp	r6, r4
 8000994:	d105      	bne.n	80009a2 <__libc_init_array+0x2e>
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f855 3b04 	ldr.w	r3, [r5], #4
 800099c:	4798      	blx	r3
 800099e:	3601      	adds	r6, #1
 80009a0:	e7ee      	b.n	8000980 <__libc_init_array+0xc>
 80009a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80009a6:	4798      	blx	r3
 80009a8:	3601      	adds	r6, #1
 80009aa:	e7f2      	b.n	8000992 <__libc_init_array+0x1e>
 80009ac:	08000fdc 	.word	0x08000fdc
 80009b0:	08000fdc 	.word	0x08000fdc
 80009b4:	08000fdc 	.word	0x08000fdc
 80009b8:	08000fe0 	.word	0x08000fe0

080009bc <__retarget_lock_init_recursive>:
 80009bc:	4770      	bx	lr

080009be <__retarget_lock_acquire_recursive>:
 80009be:	4770      	bx	lr

080009c0 <__retarget_lock_release_recursive>:
 80009c0:	4770      	bx	lr
	...

080009c4 <_free_r>:
 80009c4:	b538      	push	{r3, r4, r5, lr}
 80009c6:	4605      	mov	r5, r0
 80009c8:	2900      	cmp	r1, #0
 80009ca:	d041      	beq.n	8000a50 <_free_r+0x8c>
 80009cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009d0:	1f0c      	subs	r4, r1, #4
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	bfb8      	it	lt
 80009d6:	18e4      	addlt	r4, r4, r3
 80009d8:	f000 f8e0 	bl	8000b9c <__malloc_lock>
 80009dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000a54 <_free_r+0x90>)
 80009de:	6813      	ldr	r3, [r2, #0]
 80009e0:	b933      	cbnz	r3, 80009f0 <_free_r+0x2c>
 80009e2:	6063      	str	r3, [r4, #4]
 80009e4:	6014      	str	r4, [r2, #0]
 80009e6:	4628      	mov	r0, r5
 80009e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80009ec:	f000 b8dc 	b.w	8000ba8 <__malloc_unlock>
 80009f0:	42a3      	cmp	r3, r4
 80009f2:	d908      	bls.n	8000a06 <_free_r+0x42>
 80009f4:	6820      	ldr	r0, [r4, #0]
 80009f6:	1821      	adds	r1, r4, r0
 80009f8:	428b      	cmp	r3, r1
 80009fa:	bf01      	itttt	eq
 80009fc:	6819      	ldreq	r1, [r3, #0]
 80009fe:	685b      	ldreq	r3, [r3, #4]
 8000a00:	1809      	addeq	r1, r1, r0
 8000a02:	6021      	streq	r1, [r4, #0]
 8000a04:	e7ed      	b.n	80009e2 <_free_r+0x1e>
 8000a06:	461a      	mov	r2, r3
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	b10b      	cbz	r3, 8000a10 <_free_r+0x4c>
 8000a0c:	42a3      	cmp	r3, r4
 8000a0e:	d9fa      	bls.n	8000a06 <_free_r+0x42>
 8000a10:	6811      	ldr	r1, [r2, #0]
 8000a12:	1850      	adds	r0, r2, r1
 8000a14:	42a0      	cmp	r0, r4
 8000a16:	d10b      	bne.n	8000a30 <_free_r+0x6c>
 8000a18:	6820      	ldr	r0, [r4, #0]
 8000a1a:	4401      	add	r1, r0
 8000a1c:	1850      	adds	r0, r2, r1
 8000a1e:	4283      	cmp	r3, r0
 8000a20:	6011      	str	r1, [r2, #0]
 8000a22:	d1e0      	bne.n	80009e6 <_free_r+0x22>
 8000a24:	6818      	ldr	r0, [r3, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	6053      	str	r3, [r2, #4]
 8000a2a:	4408      	add	r0, r1
 8000a2c:	6010      	str	r0, [r2, #0]
 8000a2e:	e7da      	b.n	80009e6 <_free_r+0x22>
 8000a30:	d902      	bls.n	8000a38 <_free_r+0x74>
 8000a32:	230c      	movs	r3, #12
 8000a34:	602b      	str	r3, [r5, #0]
 8000a36:	e7d6      	b.n	80009e6 <_free_r+0x22>
 8000a38:	6820      	ldr	r0, [r4, #0]
 8000a3a:	1821      	adds	r1, r4, r0
 8000a3c:	428b      	cmp	r3, r1
 8000a3e:	bf04      	itt	eq
 8000a40:	6819      	ldreq	r1, [r3, #0]
 8000a42:	685b      	ldreq	r3, [r3, #4]
 8000a44:	6063      	str	r3, [r4, #4]
 8000a46:	bf04      	itt	eq
 8000a48:	1809      	addeq	r1, r1, r0
 8000a4a:	6021      	streq	r1, [r4, #0]
 8000a4c:	6054      	str	r4, [r2, #4]
 8000a4e:	e7ca      	b.n	80009e6 <_free_r+0x22>
 8000a50:	bd38      	pop	{r3, r4, r5, pc}
 8000a52:	bf00      	nop
 8000a54:	200001c4 	.word	0x200001c4

08000a58 <sbrk_aligned>:
 8000a58:	b570      	push	{r4, r5, r6, lr}
 8000a5a:	4e0f      	ldr	r6, [pc, #60]	@ (8000a98 <sbrk_aligned+0x40>)
 8000a5c:	460c      	mov	r4, r1
 8000a5e:	6831      	ldr	r1, [r6, #0]
 8000a60:	4605      	mov	r5, r0
 8000a62:	b911      	cbnz	r1, 8000a6a <sbrk_aligned+0x12>
 8000a64:	f000 fa1a 	bl	8000e9c <_sbrk_r>
 8000a68:	6030      	str	r0, [r6, #0]
 8000a6a:	4621      	mov	r1, r4
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	f000 fa15 	bl	8000e9c <_sbrk_r>
 8000a72:	1c43      	adds	r3, r0, #1
 8000a74:	d103      	bne.n	8000a7e <sbrk_aligned+0x26>
 8000a76:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000a7a:	4620      	mov	r0, r4
 8000a7c:	bd70      	pop	{r4, r5, r6, pc}
 8000a7e:	1cc4      	adds	r4, r0, #3
 8000a80:	f024 0403 	bic.w	r4, r4, #3
 8000a84:	42a0      	cmp	r0, r4
 8000a86:	d0f8      	beq.n	8000a7a <sbrk_aligned+0x22>
 8000a88:	1a21      	subs	r1, r4, r0
 8000a8a:	4628      	mov	r0, r5
 8000a8c:	f000 fa06 	bl	8000e9c <_sbrk_r>
 8000a90:	3001      	adds	r0, #1
 8000a92:	d1f2      	bne.n	8000a7a <sbrk_aligned+0x22>
 8000a94:	e7ef      	b.n	8000a76 <sbrk_aligned+0x1e>
 8000a96:	bf00      	nop
 8000a98:	200001c0 	.word	0x200001c0

08000a9c <_malloc_r>:
 8000a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000aa0:	1ccd      	adds	r5, r1, #3
 8000aa2:	f025 0503 	bic.w	r5, r5, #3
 8000aa6:	3508      	adds	r5, #8
 8000aa8:	2d0c      	cmp	r5, #12
 8000aaa:	bf38      	it	cc
 8000aac:	250c      	movcc	r5, #12
 8000aae:	2d00      	cmp	r5, #0
 8000ab0:	4606      	mov	r6, r0
 8000ab2:	db01      	blt.n	8000ab8 <_malloc_r+0x1c>
 8000ab4:	42a9      	cmp	r1, r5
 8000ab6:	d904      	bls.n	8000ac2 <_malloc_r+0x26>
 8000ab8:	230c      	movs	r3, #12
 8000aba:	6033      	str	r3, [r6, #0]
 8000abc:	2000      	movs	r0, #0
 8000abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ac2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000b98 <_malloc_r+0xfc>
 8000ac6:	f000 f869 	bl	8000b9c <__malloc_lock>
 8000aca:	f8d8 3000 	ldr.w	r3, [r8]
 8000ace:	461c      	mov	r4, r3
 8000ad0:	bb44      	cbnz	r4, 8000b24 <_malloc_r+0x88>
 8000ad2:	4629      	mov	r1, r5
 8000ad4:	4630      	mov	r0, r6
 8000ad6:	f7ff ffbf 	bl	8000a58 <sbrk_aligned>
 8000ada:	1c43      	adds	r3, r0, #1
 8000adc:	4604      	mov	r4, r0
 8000ade:	d158      	bne.n	8000b92 <_malloc_r+0xf6>
 8000ae0:	f8d8 4000 	ldr.w	r4, [r8]
 8000ae4:	4627      	mov	r7, r4
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d143      	bne.n	8000b72 <_malloc_r+0xd6>
 8000aea:	2c00      	cmp	r4, #0
 8000aec:	d04b      	beq.n	8000b86 <_malloc_r+0xea>
 8000aee:	6823      	ldr	r3, [r4, #0]
 8000af0:	4639      	mov	r1, r7
 8000af2:	4630      	mov	r0, r6
 8000af4:	eb04 0903 	add.w	r9, r4, r3
 8000af8:	f000 f9d0 	bl	8000e9c <_sbrk_r>
 8000afc:	4581      	cmp	r9, r0
 8000afe:	d142      	bne.n	8000b86 <_malloc_r+0xea>
 8000b00:	6821      	ldr	r1, [r4, #0]
 8000b02:	1a6d      	subs	r5, r5, r1
 8000b04:	4629      	mov	r1, r5
 8000b06:	4630      	mov	r0, r6
 8000b08:	f7ff ffa6 	bl	8000a58 <sbrk_aligned>
 8000b0c:	3001      	adds	r0, #1
 8000b0e:	d03a      	beq.n	8000b86 <_malloc_r+0xea>
 8000b10:	6823      	ldr	r3, [r4, #0]
 8000b12:	442b      	add	r3, r5
 8000b14:	6023      	str	r3, [r4, #0]
 8000b16:	f8d8 3000 	ldr.w	r3, [r8]
 8000b1a:	685a      	ldr	r2, [r3, #4]
 8000b1c:	bb62      	cbnz	r2, 8000b78 <_malloc_r+0xdc>
 8000b1e:	f8c8 7000 	str.w	r7, [r8]
 8000b22:	e00f      	b.n	8000b44 <_malloc_r+0xa8>
 8000b24:	6822      	ldr	r2, [r4, #0]
 8000b26:	1b52      	subs	r2, r2, r5
 8000b28:	d420      	bmi.n	8000b6c <_malloc_r+0xd0>
 8000b2a:	2a0b      	cmp	r2, #11
 8000b2c:	d917      	bls.n	8000b5e <_malloc_r+0xc2>
 8000b2e:	1961      	adds	r1, r4, r5
 8000b30:	42a3      	cmp	r3, r4
 8000b32:	6025      	str	r5, [r4, #0]
 8000b34:	bf18      	it	ne
 8000b36:	6059      	strne	r1, [r3, #4]
 8000b38:	6863      	ldr	r3, [r4, #4]
 8000b3a:	bf08      	it	eq
 8000b3c:	f8c8 1000 	streq.w	r1, [r8]
 8000b40:	5162      	str	r2, [r4, r5]
 8000b42:	604b      	str	r3, [r1, #4]
 8000b44:	4630      	mov	r0, r6
 8000b46:	f000 f82f 	bl	8000ba8 <__malloc_unlock>
 8000b4a:	f104 000b 	add.w	r0, r4, #11
 8000b4e:	1d23      	adds	r3, r4, #4
 8000b50:	f020 0007 	bic.w	r0, r0, #7
 8000b54:	1ac2      	subs	r2, r0, r3
 8000b56:	bf1c      	itt	ne
 8000b58:	1a1b      	subne	r3, r3, r0
 8000b5a:	50a3      	strne	r3, [r4, r2]
 8000b5c:	e7af      	b.n	8000abe <_malloc_r+0x22>
 8000b5e:	6862      	ldr	r2, [r4, #4]
 8000b60:	42a3      	cmp	r3, r4
 8000b62:	bf0c      	ite	eq
 8000b64:	f8c8 2000 	streq.w	r2, [r8]
 8000b68:	605a      	strne	r2, [r3, #4]
 8000b6a:	e7eb      	b.n	8000b44 <_malloc_r+0xa8>
 8000b6c:	4623      	mov	r3, r4
 8000b6e:	6864      	ldr	r4, [r4, #4]
 8000b70:	e7ae      	b.n	8000ad0 <_malloc_r+0x34>
 8000b72:	463c      	mov	r4, r7
 8000b74:	687f      	ldr	r7, [r7, #4]
 8000b76:	e7b6      	b.n	8000ae6 <_malloc_r+0x4a>
 8000b78:	461a      	mov	r2, r3
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	42a3      	cmp	r3, r4
 8000b7e:	d1fb      	bne.n	8000b78 <_malloc_r+0xdc>
 8000b80:	2300      	movs	r3, #0
 8000b82:	6053      	str	r3, [r2, #4]
 8000b84:	e7de      	b.n	8000b44 <_malloc_r+0xa8>
 8000b86:	230c      	movs	r3, #12
 8000b88:	6033      	str	r3, [r6, #0]
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	f000 f80c 	bl	8000ba8 <__malloc_unlock>
 8000b90:	e794      	b.n	8000abc <_malloc_r+0x20>
 8000b92:	6005      	str	r5, [r0, #0]
 8000b94:	e7d6      	b.n	8000b44 <_malloc_r+0xa8>
 8000b96:	bf00      	nop
 8000b98:	200001c4 	.word	0x200001c4

08000b9c <__malloc_lock>:
 8000b9c:	4801      	ldr	r0, [pc, #4]	@ (8000ba4 <__malloc_lock+0x8>)
 8000b9e:	f7ff bf0e 	b.w	80009be <__retarget_lock_acquire_recursive>
 8000ba2:	bf00      	nop
 8000ba4:	200001bc 	.word	0x200001bc

08000ba8 <__malloc_unlock>:
 8000ba8:	4801      	ldr	r0, [pc, #4]	@ (8000bb0 <__malloc_unlock+0x8>)
 8000baa:	f7ff bf09 	b.w	80009c0 <__retarget_lock_release_recursive>
 8000bae:	bf00      	nop
 8000bb0:	200001bc 	.word	0x200001bc

08000bb4 <__sflush_r>:
 8000bb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bbc:	0716      	lsls	r6, r2, #28
 8000bbe:	4605      	mov	r5, r0
 8000bc0:	460c      	mov	r4, r1
 8000bc2:	d454      	bmi.n	8000c6e <__sflush_r+0xba>
 8000bc4:	684b      	ldr	r3, [r1, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	dc02      	bgt.n	8000bd0 <__sflush_r+0x1c>
 8000bca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	dd48      	ble.n	8000c62 <__sflush_r+0xae>
 8000bd0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000bd2:	2e00      	cmp	r6, #0
 8000bd4:	d045      	beq.n	8000c62 <__sflush_r+0xae>
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000bdc:	682f      	ldr	r7, [r5, #0]
 8000bde:	6a21      	ldr	r1, [r4, #32]
 8000be0:	602b      	str	r3, [r5, #0]
 8000be2:	d030      	beq.n	8000c46 <__sflush_r+0x92>
 8000be4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000be6:	89a3      	ldrh	r3, [r4, #12]
 8000be8:	0759      	lsls	r1, r3, #29
 8000bea:	d505      	bpl.n	8000bf8 <__sflush_r+0x44>
 8000bec:	6863      	ldr	r3, [r4, #4]
 8000bee:	1ad2      	subs	r2, r2, r3
 8000bf0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000bf2:	b10b      	cbz	r3, 8000bf8 <__sflush_r+0x44>
 8000bf4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000bf6:	1ad2      	subs	r2, r2, r3
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000bfc:	6a21      	ldr	r1, [r4, #32]
 8000bfe:	4628      	mov	r0, r5
 8000c00:	47b0      	blx	r6
 8000c02:	1c43      	adds	r3, r0, #1
 8000c04:	89a3      	ldrh	r3, [r4, #12]
 8000c06:	d106      	bne.n	8000c16 <__sflush_r+0x62>
 8000c08:	6829      	ldr	r1, [r5, #0]
 8000c0a:	291d      	cmp	r1, #29
 8000c0c:	d82b      	bhi.n	8000c66 <__sflush_r+0xb2>
 8000c0e:	4a2a      	ldr	r2, [pc, #168]	@ (8000cb8 <__sflush_r+0x104>)
 8000c10:	410a      	asrs	r2, r1
 8000c12:	07d6      	lsls	r6, r2, #31
 8000c14:	d427      	bmi.n	8000c66 <__sflush_r+0xb2>
 8000c16:	2200      	movs	r2, #0
 8000c18:	6062      	str	r2, [r4, #4]
 8000c1a:	04d9      	lsls	r1, r3, #19
 8000c1c:	6922      	ldr	r2, [r4, #16]
 8000c1e:	6022      	str	r2, [r4, #0]
 8000c20:	d504      	bpl.n	8000c2c <__sflush_r+0x78>
 8000c22:	1c42      	adds	r2, r0, #1
 8000c24:	d101      	bne.n	8000c2a <__sflush_r+0x76>
 8000c26:	682b      	ldr	r3, [r5, #0]
 8000c28:	b903      	cbnz	r3, 8000c2c <__sflush_r+0x78>
 8000c2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8000c2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000c2e:	602f      	str	r7, [r5, #0]
 8000c30:	b1b9      	cbz	r1, 8000c62 <__sflush_r+0xae>
 8000c32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000c36:	4299      	cmp	r1, r3
 8000c38:	d002      	beq.n	8000c40 <__sflush_r+0x8c>
 8000c3a:	4628      	mov	r0, r5
 8000c3c:	f7ff fec2 	bl	80009c4 <_free_r>
 8000c40:	2300      	movs	r3, #0
 8000c42:	6363      	str	r3, [r4, #52]	@ 0x34
 8000c44:	e00d      	b.n	8000c62 <__sflush_r+0xae>
 8000c46:	2301      	movs	r3, #1
 8000c48:	4628      	mov	r0, r5
 8000c4a:	47b0      	blx	r6
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	1c50      	adds	r0, r2, #1
 8000c50:	d1c9      	bne.n	8000be6 <__sflush_r+0x32>
 8000c52:	682b      	ldr	r3, [r5, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d0c6      	beq.n	8000be6 <__sflush_r+0x32>
 8000c58:	2b1d      	cmp	r3, #29
 8000c5a:	d001      	beq.n	8000c60 <__sflush_r+0xac>
 8000c5c:	2b16      	cmp	r3, #22
 8000c5e:	d11e      	bne.n	8000c9e <__sflush_r+0xea>
 8000c60:	602f      	str	r7, [r5, #0]
 8000c62:	2000      	movs	r0, #0
 8000c64:	e022      	b.n	8000cac <__sflush_r+0xf8>
 8000c66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c6a:	b21b      	sxth	r3, r3
 8000c6c:	e01b      	b.n	8000ca6 <__sflush_r+0xf2>
 8000c6e:	690f      	ldr	r7, [r1, #16]
 8000c70:	2f00      	cmp	r7, #0
 8000c72:	d0f6      	beq.n	8000c62 <__sflush_r+0xae>
 8000c74:	0793      	lsls	r3, r2, #30
 8000c76:	680e      	ldr	r6, [r1, #0]
 8000c78:	bf08      	it	eq
 8000c7a:	694b      	ldreq	r3, [r1, #20]
 8000c7c:	600f      	str	r7, [r1, #0]
 8000c7e:	bf18      	it	ne
 8000c80:	2300      	movne	r3, #0
 8000c82:	eba6 0807 	sub.w	r8, r6, r7
 8000c86:	608b      	str	r3, [r1, #8]
 8000c88:	f1b8 0f00 	cmp.w	r8, #0
 8000c8c:	dde9      	ble.n	8000c62 <__sflush_r+0xae>
 8000c8e:	6a21      	ldr	r1, [r4, #32]
 8000c90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000c92:	4643      	mov	r3, r8
 8000c94:	463a      	mov	r2, r7
 8000c96:	4628      	mov	r0, r5
 8000c98:	47b0      	blx	r6
 8000c9a:	2800      	cmp	r0, #0
 8000c9c:	dc08      	bgt.n	8000cb0 <__sflush_r+0xfc>
 8000c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ca2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ca6:	81a3      	strh	r3, [r4, #12]
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cb0:	4407      	add	r7, r0
 8000cb2:	eba8 0800 	sub.w	r8, r8, r0
 8000cb6:	e7e7      	b.n	8000c88 <__sflush_r+0xd4>
 8000cb8:	dfbffffe 	.word	0xdfbffffe

08000cbc <_fflush_r>:
 8000cbc:	b538      	push	{r3, r4, r5, lr}
 8000cbe:	690b      	ldr	r3, [r1, #16]
 8000cc0:	4605      	mov	r5, r0
 8000cc2:	460c      	mov	r4, r1
 8000cc4:	b913      	cbnz	r3, 8000ccc <_fflush_r+0x10>
 8000cc6:	2500      	movs	r5, #0
 8000cc8:	4628      	mov	r0, r5
 8000cca:	bd38      	pop	{r3, r4, r5, pc}
 8000ccc:	b118      	cbz	r0, 8000cd6 <_fflush_r+0x1a>
 8000cce:	6a03      	ldr	r3, [r0, #32]
 8000cd0:	b90b      	cbnz	r3, 8000cd6 <_fflush_r+0x1a>
 8000cd2:	f7ff fd79 	bl	80007c8 <__sinit>
 8000cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d0f3      	beq.n	8000cc6 <_fflush_r+0xa>
 8000cde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000ce0:	07d0      	lsls	r0, r2, #31
 8000ce2:	d404      	bmi.n	8000cee <_fflush_r+0x32>
 8000ce4:	0599      	lsls	r1, r3, #22
 8000ce6:	d402      	bmi.n	8000cee <_fflush_r+0x32>
 8000ce8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000cea:	f7ff fe68 	bl	80009be <__retarget_lock_acquire_recursive>
 8000cee:	4628      	mov	r0, r5
 8000cf0:	4621      	mov	r1, r4
 8000cf2:	f7ff ff5f 	bl	8000bb4 <__sflush_r>
 8000cf6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000cf8:	07da      	lsls	r2, r3, #31
 8000cfa:	4605      	mov	r5, r0
 8000cfc:	d4e4      	bmi.n	8000cc8 <_fflush_r+0xc>
 8000cfe:	89a3      	ldrh	r3, [r4, #12]
 8000d00:	059b      	lsls	r3, r3, #22
 8000d02:	d4e1      	bmi.n	8000cc8 <_fflush_r+0xc>
 8000d04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d06:	f7ff fe5b 	bl	80009c0 <__retarget_lock_release_recursive>
 8000d0a:	e7dd      	b.n	8000cc8 <_fflush_r+0xc>

08000d0c <_putc_r>:
 8000d0c:	b570      	push	{r4, r5, r6, lr}
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4614      	mov	r4, r2
 8000d12:	4606      	mov	r6, r0
 8000d14:	b118      	cbz	r0, 8000d1e <_putc_r+0x12>
 8000d16:	6a03      	ldr	r3, [r0, #32]
 8000d18:	b90b      	cbnz	r3, 8000d1e <_putc_r+0x12>
 8000d1a:	f7ff fd55 	bl	80007c8 <__sinit>
 8000d1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000d20:	07d8      	lsls	r0, r3, #31
 8000d22:	d405      	bmi.n	8000d30 <_putc_r+0x24>
 8000d24:	89a3      	ldrh	r3, [r4, #12]
 8000d26:	0599      	lsls	r1, r3, #22
 8000d28:	d402      	bmi.n	8000d30 <_putc_r+0x24>
 8000d2a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d2c:	f7ff fe47 	bl	80009be <__retarget_lock_acquire_recursive>
 8000d30:	68a3      	ldr	r3, [r4, #8]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	60a3      	str	r3, [r4, #8]
 8000d38:	da05      	bge.n	8000d46 <_putc_r+0x3a>
 8000d3a:	69a2      	ldr	r2, [r4, #24]
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	db12      	blt.n	8000d66 <_putc_r+0x5a>
 8000d40:	b2eb      	uxtb	r3, r5
 8000d42:	2b0a      	cmp	r3, #10
 8000d44:	d00f      	beq.n	8000d66 <_putc_r+0x5a>
 8000d46:	6823      	ldr	r3, [r4, #0]
 8000d48:	1c5a      	adds	r2, r3, #1
 8000d4a:	6022      	str	r2, [r4, #0]
 8000d4c:	701d      	strb	r5, [r3, #0]
 8000d4e:	b2ed      	uxtb	r5, r5
 8000d50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000d52:	07da      	lsls	r2, r3, #31
 8000d54:	d405      	bmi.n	8000d62 <_putc_r+0x56>
 8000d56:	89a3      	ldrh	r3, [r4, #12]
 8000d58:	059b      	lsls	r3, r3, #22
 8000d5a:	d402      	bmi.n	8000d62 <_putc_r+0x56>
 8000d5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d5e:	f7ff fe2f 	bl	80009c0 <__retarget_lock_release_recursive>
 8000d62:	4628      	mov	r0, r5
 8000d64:	bd70      	pop	{r4, r5, r6, pc}
 8000d66:	4629      	mov	r1, r5
 8000d68:	4622      	mov	r2, r4
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	f000 f802 	bl	8000d74 <__swbuf_r>
 8000d70:	4605      	mov	r5, r0
 8000d72:	e7ed      	b.n	8000d50 <_putc_r+0x44>

08000d74 <__swbuf_r>:
 8000d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d76:	460e      	mov	r6, r1
 8000d78:	4614      	mov	r4, r2
 8000d7a:	4605      	mov	r5, r0
 8000d7c:	b118      	cbz	r0, 8000d86 <__swbuf_r+0x12>
 8000d7e:	6a03      	ldr	r3, [r0, #32]
 8000d80:	b90b      	cbnz	r3, 8000d86 <__swbuf_r+0x12>
 8000d82:	f7ff fd21 	bl	80007c8 <__sinit>
 8000d86:	69a3      	ldr	r3, [r4, #24]
 8000d88:	60a3      	str	r3, [r4, #8]
 8000d8a:	89a3      	ldrh	r3, [r4, #12]
 8000d8c:	071a      	lsls	r2, r3, #28
 8000d8e:	d501      	bpl.n	8000d94 <__swbuf_r+0x20>
 8000d90:	6923      	ldr	r3, [r4, #16]
 8000d92:	b943      	cbnz	r3, 8000da6 <__swbuf_r+0x32>
 8000d94:	4621      	mov	r1, r4
 8000d96:	4628      	mov	r0, r5
 8000d98:	f000 f82a 	bl	8000df0 <__swsetup_r>
 8000d9c:	b118      	cbz	r0, 8000da6 <__swbuf_r+0x32>
 8000d9e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8000da2:	4638      	mov	r0, r7
 8000da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000da6:	6823      	ldr	r3, [r4, #0]
 8000da8:	6922      	ldr	r2, [r4, #16]
 8000daa:	1a98      	subs	r0, r3, r2
 8000dac:	6963      	ldr	r3, [r4, #20]
 8000dae:	b2f6      	uxtb	r6, r6
 8000db0:	4283      	cmp	r3, r0
 8000db2:	4637      	mov	r7, r6
 8000db4:	dc05      	bgt.n	8000dc2 <__swbuf_r+0x4e>
 8000db6:	4621      	mov	r1, r4
 8000db8:	4628      	mov	r0, r5
 8000dba:	f7ff ff7f 	bl	8000cbc <_fflush_r>
 8000dbe:	2800      	cmp	r0, #0
 8000dc0:	d1ed      	bne.n	8000d9e <__swbuf_r+0x2a>
 8000dc2:	68a3      	ldr	r3, [r4, #8]
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	60a3      	str	r3, [r4, #8]
 8000dc8:	6823      	ldr	r3, [r4, #0]
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	6022      	str	r2, [r4, #0]
 8000dce:	701e      	strb	r6, [r3, #0]
 8000dd0:	6962      	ldr	r2, [r4, #20]
 8000dd2:	1c43      	adds	r3, r0, #1
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d004      	beq.n	8000de2 <__swbuf_r+0x6e>
 8000dd8:	89a3      	ldrh	r3, [r4, #12]
 8000dda:	07db      	lsls	r3, r3, #31
 8000ddc:	d5e1      	bpl.n	8000da2 <__swbuf_r+0x2e>
 8000dde:	2e0a      	cmp	r6, #10
 8000de0:	d1df      	bne.n	8000da2 <__swbuf_r+0x2e>
 8000de2:	4621      	mov	r1, r4
 8000de4:	4628      	mov	r0, r5
 8000de6:	f7ff ff69 	bl	8000cbc <_fflush_r>
 8000dea:	2800      	cmp	r0, #0
 8000dec:	d0d9      	beq.n	8000da2 <__swbuf_r+0x2e>
 8000dee:	e7d6      	b.n	8000d9e <__swbuf_r+0x2a>

08000df0 <__swsetup_r>:
 8000df0:	b538      	push	{r3, r4, r5, lr}
 8000df2:	4b29      	ldr	r3, [pc, #164]	@ (8000e98 <__swsetup_r+0xa8>)
 8000df4:	4605      	mov	r5, r0
 8000df6:	6818      	ldr	r0, [r3, #0]
 8000df8:	460c      	mov	r4, r1
 8000dfa:	b118      	cbz	r0, 8000e04 <__swsetup_r+0x14>
 8000dfc:	6a03      	ldr	r3, [r0, #32]
 8000dfe:	b90b      	cbnz	r3, 8000e04 <__swsetup_r+0x14>
 8000e00:	f7ff fce2 	bl	80007c8 <__sinit>
 8000e04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e08:	0719      	lsls	r1, r3, #28
 8000e0a:	d422      	bmi.n	8000e52 <__swsetup_r+0x62>
 8000e0c:	06da      	lsls	r2, r3, #27
 8000e0e:	d407      	bmi.n	8000e20 <__swsetup_r+0x30>
 8000e10:	2209      	movs	r2, #9
 8000e12:	602a      	str	r2, [r5, #0]
 8000e14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e18:	81a3      	strh	r3, [r4, #12]
 8000e1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e1e:	e033      	b.n	8000e88 <__swsetup_r+0x98>
 8000e20:	0758      	lsls	r0, r3, #29
 8000e22:	d512      	bpl.n	8000e4a <__swsetup_r+0x5a>
 8000e24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000e26:	b141      	cbz	r1, 8000e3a <__swsetup_r+0x4a>
 8000e28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d002      	beq.n	8000e36 <__swsetup_r+0x46>
 8000e30:	4628      	mov	r0, r5
 8000e32:	f7ff fdc7 	bl	80009c4 <_free_r>
 8000e36:	2300      	movs	r3, #0
 8000e38:	6363      	str	r3, [r4, #52]	@ 0x34
 8000e3a:	89a3      	ldrh	r3, [r4, #12]
 8000e3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000e40:	81a3      	strh	r3, [r4, #12]
 8000e42:	2300      	movs	r3, #0
 8000e44:	6063      	str	r3, [r4, #4]
 8000e46:	6923      	ldr	r3, [r4, #16]
 8000e48:	6023      	str	r3, [r4, #0]
 8000e4a:	89a3      	ldrh	r3, [r4, #12]
 8000e4c:	f043 0308 	orr.w	r3, r3, #8
 8000e50:	81a3      	strh	r3, [r4, #12]
 8000e52:	6923      	ldr	r3, [r4, #16]
 8000e54:	b94b      	cbnz	r3, 8000e6a <__swsetup_r+0x7a>
 8000e56:	89a3      	ldrh	r3, [r4, #12]
 8000e58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000e5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e60:	d003      	beq.n	8000e6a <__swsetup_r+0x7a>
 8000e62:	4621      	mov	r1, r4
 8000e64:	4628      	mov	r0, r5
 8000e66:	f000 f84f 	bl	8000f08 <__smakebuf_r>
 8000e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e6e:	f013 0201 	ands.w	r2, r3, #1
 8000e72:	d00a      	beq.n	8000e8a <__swsetup_r+0x9a>
 8000e74:	2200      	movs	r2, #0
 8000e76:	60a2      	str	r2, [r4, #8]
 8000e78:	6962      	ldr	r2, [r4, #20]
 8000e7a:	4252      	negs	r2, r2
 8000e7c:	61a2      	str	r2, [r4, #24]
 8000e7e:	6922      	ldr	r2, [r4, #16]
 8000e80:	b942      	cbnz	r2, 8000e94 <__swsetup_r+0xa4>
 8000e82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000e86:	d1c5      	bne.n	8000e14 <__swsetup_r+0x24>
 8000e88:	bd38      	pop	{r3, r4, r5, pc}
 8000e8a:	0799      	lsls	r1, r3, #30
 8000e8c:	bf58      	it	pl
 8000e8e:	6962      	ldrpl	r2, [r4, #20]
 8000e90:	60a2      	str	r2, [r4, #8]
 8000e92:	e7f4      	b.n	8000e7e <__swsetup_r+0x8e>
 8000e94:	2000      	movs	r0, #0
 8000e96:	e7f7      	b.n	8000e88 <__swsetup_r+0x98>
 8000e98:	2000000c 	.word	0x2000000c

08000e9c <_sbrk_r>:
 8000e9c:	b538      	push	{r3, r4, r5, lr}
 8000e9e:	4d06      	ldr	r5, [pc, #24]	@ (8000eb8 <_sbrk_r+0x1c>)
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	602b      	str	r3, [r5, #0]
 8000ea8:	f7ff fba2 	bl	80005f0 <_sbrk>
 8000eac:	1c43      	adds	r3, r0, #1
 8000eae:	d102      	bne.n	8000eb6 <_sbrk_r+0x1a>
 8000eb0:	682b      	ldr	r3, [r5, #0]
 8000eb2:	b103      	cbz	r3, 8000eb6 <_sbrk_r+0x1a>
 8000eb4:	6023      	str	r3, [r4, #0]
 8000eb6:	bd38      	pop	{r3, r4, r5, pc}
 8000eb8:	200001b8 	.word	0x200001b8

08000ebc <__swhatbuf_r>:
 8000ebc:	b570      	push	{r4, r5, r6, lr}
 8000ebe:	460c      	mov	r4, r1
 8000ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ec4:	2900      	cmp	r1, #0
 8000ec6:	b096      	sub	sp, #88	@ 0x58
 8000ec8:	4615      	mov	r5, r2
 8000eca:	461e      	mov	r6, r3
 8000ecc:	da0d      	bge.n	8000eea <__swhatbuf_r+0x2e>
 8000ece:	89a3      	ldrh	r3, [r4, #12]
 8000ed0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000ed4:	f04f 0100 	mov.w	r1, #0
 8000ed8:	bf14      	ite	ne
 8000eda:	2340      	movne	r3, #64	@ 0x40
 8000edc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	6031      	str	r1, [r6, #0]
 8000ee4:	602b      	str	r3, [r5, #0]
 8000ee6:	b016      	add	sp, #88	@ 0x58
 8000ee8:	bd70      	pop	{r4, r5, r6, pc}
 8000eea:	466a      	mov	r2, sp
 8000eec:	f000 f848 	bl	8000f80 <_fstat_r>
 8000ef0:	2800      	cmp	r0, #0
 8000ef2:	dbec      	blt.n	8000ece <__swhatbuf_r+0x12>
 8000ef4:	9901      	ldr	r1, [sp, #4]
 8000ef6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000efa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000efe:	4259      	negs	r1, r3
 8000f00:	4159      	adcs	r1, r3
 8000f02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f06:	e7eb      	b.n	8000ee0 <__swhatbuf_r+0x24>

08000f08 <__smakebuf_r>:
 8000f08:	898b      	ldrh	r3, [r1, #12]
 8000f0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f0c:	079d      	lsls	r5, r3, #30
 8000f0e:	4606      	mov	r6, r0
 8000f10:	460c      	mov	r4, r1
 8000f12:	d507      	bpl.n	8000f24 <__smakebuf_r+0x1c>
 8000f14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000f18:	6023      	str	r3, [r4, #0]
 8000f1a:	6123      	str	r3, [r4, #16]
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	6163      	str	r3, [r4, #20]
 8000f20:	b003      	add	sp, #12
 8000f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f24:	ab01      	add	r3, sp, #4
 8000f26:	466a      	mov	r2, sp
 8000f28:	f7ff ffc8 	bl	8000ebc <__swhatbuf_r>
 8000f2c:	9f00      	ldr	r7, [sp, #0]
 8000f2e:	4605      	mov	r5, r0
 8000f30:	4639      	mov	r1, r7
 8000f32:	4630      	mov	r0, r6
 8000f34:	f7ff fdb2 	bl	8000a9c <_malloc_r>
 8000f38:	b948      	cbnz	r0, 8000f4e <__smakebuf_r+0x46>
 8000f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f3e:	059a      	lsls	r2, r3, #22
 8000f40:	d4ee      	bmi.n	8000f20 <__smakebuf_r+0x18>
 8000f42:	f023 0303 	bic.w	r3, r3, #3
 8000f46:	f043 0302 	orr.w	r3, r3, #2
 8000f4a:	81a3      	strh	r3, [r4, #12]
 8000f4c:	e7e2      	b.n	8000f14 <__smakebuf_r+0xc>
 8000f4e:	89a3      	ldrh	r3, [r4, #12]
 8000f50:	6020      	str	r0, [r4, #0]
 8000f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f56:	81a3      	strh	r3, [r4, #12]
 8000f58:	9b01      	ldr	r3, [sp, #4]
 8000f5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000f5e:	b15b      	cbz	r3, 8000f78 <__smakebuf_r+0x70>
 8000f60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f64:	4630      	mov	r0, r6
 8000f66:	f000 f81d 	bl	8000fa4 <_isatty_r>
 8000f6a:	b128      	cbz	r0, 8000f78 <__smakebuf_r+0x70>
 8000f6c:	89a3      	ldrh	r3, [r4, #12]
 8000f6e:	f023 0303 	bic.w	r3, r3, #3
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	81a3      	strh	r3, [r4, #12]
 8000f78:	89a3      	ldrh	r3, [r4, #12]
 8000f7a:	431d      	orrs	r5, r3
 8000f7c:	81a5      	strh	r5, [r4, #12]
 8000f7e:	e7cf      	b.n	8000f20 <__smakebuf_r+0x18>

08000f80 <_fstat_r>:
 8000f80:	b538      	push	{r3, r4, r5, lr}
 8000f82:	4d07      	ldr	r5, [pc, #28]	@ (8000fa0 <_fstat_r+0x20>)
 8000f84:	2300      	movs	r3, #0
 8000f86:	4604      	mov	r4, r0
 8000f88:	4608      	mov	r0, r1
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	602b      	str	r3, [r5, #0]
 8000f8e:	f7ff fb06 	bl	800059e <_fstat>
 8000f92:	1c43      	adds	r3, r0, #1
 8000f94:	d102      	bne.n	8000f9c <_fstat_r+0x1c>
 8000f96:	682b      	ldr	r3, [r5, #0]
 8000f98:	b103      	cbz	r3, 8000f9c <_fstat_r+0x1c>
 8000f9a:	6023      	str	r3, [r4, #0]
 8000f9c:	bd38      	pop	{r3, r4, r5, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200001b8 	.word	0x200001b8

08000fa4 <_isatty_r>:
 8000fa4:	b538      	push	{r3, r4, r5, lr}
 8000fa6:	4d06      	ldr	r5, [pc, #24]	@ (8000fc0 <_isatty_r+0x1c>)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	4604      	mov	r4, r0
 8000fac:	4608      	mov	r0, r1
 8000fae:	602b      	str	r3, [r5, #0]
 8000fb0:	f7ff fb05 	bl	80005be <_isatty>
 8000fb4:	1c43      	adds	r3, r0, #1
 8000fb6:	d102      	bne.n	8000fbe <_isatty_r+0x1a>
 8000fb8:	682b      	ldr	r3, [r5, #0]
 8000fba:	b103      	cbz	r3, 8000fbe <_isatty_r+0x1a>
 8000fbc:	6023      	str	r3, [r4, #0]
 8000fbe:	bd38      	pop	{r3, r4, r5, pc}
 8000fc0:	200001b8 	.word	0x200001b8

08000fc4 <_init>:
 8000fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fc6:	bf00      	nop
 8000fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fca:	bc08      	pop	{r3}
 8000fcc:	469e      	mov	lr, r3
 8000fce:	4770      	bx	lr

08000fd0 <_fini>:
 8000fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fd2:	bf00      	nop
 8000fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fd6:	bc08      	pop	{r3}
 8000fd8:	469e      	mov	lr, r3
 8000fda:	4770      	bx	lr
